name: CI/CD Workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # --- JOB 1: Detecta qué carpetas han cambiado ---
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4
      - name: Detectar cambios en las rutas
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

   # --- JOB 2: BUILD Y PRUEBAS UNITARIAS ---
  build-and-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: backend   
    
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      # ===================================================================
      # --- PASO: CONFIGURAR EL ESQUEMA DE LA BASE DE DATOS ---
      # ===================================================================
      - name: Configurar base de datos
        # Este comando se conecta al servicio de PostgreSQL y ejecuta tu script SQL
        # para crear todas las tablas necesarias antes de las pruebas.
        run: psql -h localhost -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -p 5432 -f database-schema.sql
        env:
          # psql lee la contraseña de esta variable de entorno
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
      
      - name: Lint del código
        run: npm run lint

      - name: Ejecutar pruebas y validar cobertura
        run:  npm run test:ci
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CI: true

      - name: Guardar reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: cobertura-tests
          path: backend/coverage
  
  # ===================================================================
  # --- JOB 3: PRUEBAS DE RENDIMIENTO CON K6 (NUEVO) ---
  # ===================================================================
  performance-tests:
    runs-on: ubuntu-latest
    # Este job depende del éxito del job anterior
    needs: build-and-test
    # Condición: Ejecutar solo en push a 'main' para no gastar minutos en cada PR.
    # Si quieres probarlo en un PR, puedes eliminar esta línea temporalmente.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
          
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Instalar dependencias del backend
        working-directory: backend
        run: npm install
      - name: Configurar base de datos
        working-directory: backend
        run: psql -h localhost -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -p 5432 -f database-schema.sql
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
      
      - name: Iniciar backend en segundo plano
        working-directory: backend
        # Inicia el servidor y el '&' lo deja corriendo para los siguientes pasos
        run: npm start &
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      - name: Esperar a que el backend esté listo
        # Pausa crucial para dar tiempo al servidor de iniciarse antes de atacarlo.
        run: sleep 15


      - name: Instalar k6
        run: |
            sudo apt-get install -y debian-keyring
            curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k6.gpg
            echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
            sudo apt-get update
            sudo apt-get install k6
      
      - name: Crear carpeta de reportes
        working-directory: backend
        run: mkdir -p reports

      - name: Ejecutar Prueba de Carga (Ramp Load) - Versión CI
        working-directory: backend
        run: k6 run tests/k6/ramp_load.js --duration 2m

      - name: Ejecutar Prueba de Picos (Spike) - Versión CI
        working-directory: backend
        run: k6 run tests/k6/spike.js --duration 1m

      - name: Ejecutar Prueba de Resistencia (Soak) - Versión CI
        # Ejecutamos una versión corta para validar que el script funciona
        # y no tener el pipeline corriendo por una hora.
        working-directory: backend
        run: k6 run tests/k6/soak.js --duration 3m

      - name: Guardar reportes de k6
        # Este paso se ejecuta siempre, incluso si las pruebas de k6 fallan,
        # para que puedas ver los reportes y diagnosticar el problema.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-reports
          path: backend/reports/
  
  # ===================================================================
  # --- JOB 4: PRUEBAS DEL FRONTEND ---
  # ===================================================================
  frontend-tests:
    runs-on: ubuntu-latest
    needs: changes 
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Run tests with coverage (Vitest)
        run: npm run test:coverage

      - name: Upload coverage report frontend
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage
  
   # ===================================================================
  # --- JOB 5: DESPLIEGUE A PRODUCCIÓN ---
  # ===================================================================
  deploy:
    runs-on: ubuntu-latest
    needs: [performance-tests, frontend-tests]
    if: |
      always() &&
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      (needs.performance-tests.result == 'success' || needs.performance-tests.result == 'skipped') &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    
    steps:
      # Siempre clonamos el repositorio en el job de despliegue
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Desplegar Backend a Render
        if: needs.performance-tests.result == 'success'
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

      # --- SECCIÓN MODIFICADA ---
      - name: Desplegar Frontend a Vercel
        if: needs.frontend-tests.result == 'success'
        run: |
          npm install --global vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          # Vercel CLI necesita estos para saber a qué proyecto desplegar
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Publicar URL de Despliegue
        # Este paso es solo para visibilidad en los logs
        run: echo "Proceso de despliegue finalizado."